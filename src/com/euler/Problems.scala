package com.euler

import scala.collection.mutable.ListBuffer
import scala.math._
import scala.util.control.Breaks

class Problems {

/* 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
*/
  
  def problem_01 (num: Int): Int = {
    lazy val arr = 1 to num-1;
    println(arr);
    var result = 0;
      
    arr.foreach(f => {
      if(f % 3 == 0 || f % 5 == 0){
        println(f)
        result += f  
      }
    });
    // 233168
    result;
  }
  
/*
2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
  
  def problem_02 (num: Int): Int = {
    var sum = 0;
    var a = 1
    var b = 2
    while(a <= num){
      if(a % 2 == 0){
        sum += a;
      }
      var c = a+b
      a = b
      b = c
    }
    // 4613732
    sum
  }
  
/*
3. The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
*/
  
  def problem_03(num: Long): Int = {
    var factor = new ListBuffer[Int]();
    var n = BigInt(num)
    var i = 2
    while(i <= n){
      while(n % i == 0){
        factor += i
        n = n / i
      }
      i+=1
    }
    // List(71, 839, 1471, 6857)
    factor.toList.reverse.head
  }
  
/*
4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
*/
  
  def problem_04(num: Int): Int = {
    var result = 0
    var n = num;
    lazy val loop = new Breaks;
    loop.breakable{
      while(n > 0){
        lazy val value = num * n
        println(s"$num * $n")
        if(value.toString == value.toString.reverse){
          result = value
          loop.break
        }
        n -= 1
      }  
    }
    // 99 * 91 = 9009
    // 999 * 91 = 90909
    result
  }
  
/*
5. 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
  
  def problem_05(num: Int): Int = {
    var n = 0;
  	var i = 1;
  	var flag = false;
  	while (flag == false){
  		n += num; // Has to be divisible by the highest number 20
  		// If the number is divisible by 1,2,3,4,5,...,20
  		while(n % i == 0 && i <= num) {
  			if(i == num){
  				flag = true
  			}
  			i+=1;
  		}
  		i = 1;
  	}
  	// 232792560
  	return n
  }
  
  
/*
6. The sum of the squares of the first ten natural numbers is,
12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
  
  def problem_06(num: Int): Int = {
    var value1 = 0
    var value2 = 0
    for(i <- 1 to num){
      value1 += math.pow(i,2).toInt
      value2 += i
    };        
    val result = math.pow(value2,2) - value1
//    25164150
    result.toInt
  }
  
/*
7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
*/  
  def problem_07(num: Int): List[Int] = {
    val arr = 1 to num
    
    val primes = arr.filter(a => isPrime(arr.toList,a))
    
    primes.toList
  }
  
  def isPrime(arr: List[Int], num: Int): Boolean = {
    if(num <= 1)
      false
    else if(num == 2)
      true
    else
      !(2 to (num-1)).exists(x => num % x == 0)
  }
  
  def isPrime1(n: Int): Boolean = ! ((2 until n-1) exists (n % _ == 0))
  
  
  def problem_08():Unit = {
    
    
//    val arr = List[String]("apple1","banana2","orange3")
//    val regex = """^([a-zA-Z]\d{1})""".r
//    val result = arr.forall(a => regex.findFirstIn(a).isDefined)
//    print(result)
      
  }
  
  
}